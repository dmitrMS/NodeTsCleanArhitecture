generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id         Int         @id @default(autoincrement())
  login      String     @db.VarChar
  password   String     @db.VarChar
  role       String     @db.VarChar
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  user_team  user_team[]
  work_time  work_time[]
  notification  notification[]
  project    project[]
}

model user_team {
  id         Int         @id @default(autoincrement())
  user_id    Int 
  role_id    Int  
  team_id    Int 
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user")
  role       role     @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "role")
  team       team     @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "team")
  task_worker  task_worker[]
}

model work_time {
  id         Int       @id @default(autoincrement())
  user_id    Int  
  task_id    Int?   
  task_name  String?     @db.VarChar
  begin_date DateTime   
  end_date   DateTime? 
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user")
  task       task?     @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "task")
}

model task {
  id         Int       @id @default(autoincrement())
  name       String     @db.VarChar
  description    String?     @db.VarChar
  status_id  Int?
  project_id Int
  begin_date DateTime?   
  end_date   DateTime? 
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  task_worker  task_worker[]
  project    project     @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "project")
  status     status?     @relation(fields: [status_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "status")
  work_time  work_time[]
}

model team {
  id         Int       @id @default(autoincrement())
  admin_id   Int 
  project_id Int
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  user_team  user_team[]
  task_worker  task_worker[]
  project    project     @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "project")
}

model notification {
  id         Int       @id @default(autoincrement())
  sender_id   Int
  user_id   Int 
  status    Boolean?    @default(false)
  reason    String     @db.VarChar
  data_id    Int
  text    String?     @db.VarChar
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user")
}

model project {
  id         Int       @id @default(autoincrement())
  name       String     @db.VarChar
  user_id    Int 
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user")
  task  task[]
  team  team[]
}

model status {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  task       task[]
}

model role {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  user_team       user_team[]
}

model task_worker {
  id         Int         @id @default(autoincrement())
  team_id    Int
  task_id    Int  
  user_team_id    Int       
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  user_team       user_team     @relation(fields: [user_team_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_team")
  team       team     @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "team")
  task       task     @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "task")
}